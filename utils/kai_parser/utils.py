import asyncio
import datetime
import logging
from pprint import pprint

from sqlalchemy.exc import IntegrityError

from utils.kai_parser.parser import KaiParser
from database.models.kai import GroupLesson, Group, Departament, Teacher, Discipline
from utils.kai_parser.schemas import KaiApiError, GroupsResult


def parse_parity(parity: str) -> int:
    """
    0 - any week
    1 - odd week
    2 - even week
    """
    odd = False
    even = False

    # '–Ω–µ—è' - typo. Check misc/possible_parity.txt
    if '–Ω–µ—á–µ—Ç' in parity or '–Ω–µ—á' in parity or '–Ω–µ—è' in parity:
        odd = True
        parity = parity.replace('–Ω–µ—á–µ—Ç', '')

    if '—á–µ—Ç' in parity:
        even = True

    if odd and not even:
        return 1
    if even and not odd:
        return 2

    return 0


def lesson_type_to_emoji(lesson_type: str):
    lessons_emoji = {
        '–ª–µ–∫': 'üì¢',
        '–ø—Ä': 'üìù',
        '–ª.—Ä.': 'üß™',
        '—Ñ–∏–∑': 'üèÜ',
        '–∫–æ–Ω—Å': '‚ùì',
        '–∫.—Ä.': 'üéì',
        '–∏.–∑.': 'üéØ'
    }

    return lessons_emoji.get(lesson_type, lesson_type)


def lesson_type_to_text(lesson_type: str):
    lessons_text = {
        '–ª–µ–∫':  '–õ–µ–∫—Ü–∏—è',
        '–ø—Ä':   '–ü—Ä–∞–∫—Ç–∏–∫–∞',
        '–ª.—Ä.': '–õ–∞–±. —Ä–∞–±.',
        '—Ñ–∏–∑':  '–§–∏–∑-—Ä–∞',
        '–∫–æ–Ω—Å': '–ö–æ–Ω—Å.',
        '–∫.—Ä.': '–ö—É—Ä—Å. —Ä–∞–±.',
        '–∏.–∑.': '–ò–Ω–¥. –∑–∞–¥.'
    }

    return lessons_text.get(lesson_type, lesson_type)


def get_lesson_end_time(start_time: datetime.time, lesson_type: str) -> datetime.time | None:
    """
    –í—Ä–µ–º—è –ø–∞—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ–∏–ª–∏–∞–ª–æ–≤. –ù–∞ –º–æ–º–µ–Ω—Ç 2023-2024 —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ –ö–ê–ò –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö
    —Ñ–∏–ª–∏–∞–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å –Ω–æ–º–µ—Ä–æ–º –∏–∑ 5 —Ü–∏—Ñ—Ä –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "8" –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫–∞–∫–∏–º-—Ç–æ —Ñ–∏–ª–∏–∞–ª–∞–º

    (–í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ - –ø–æ–ª—É—á–∏—Ç—å –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–ª–∏
    —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã, —Ç.–µ. –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ —Å–ø–∏—Å–æ–∫ start_times.
    –ê –≤–æ–∑–º–æ–∂–Ω–æ –∏ –Ω–µ —Å—Ç–æ–∏—Ç –¥—É–º–∞—Ç—å –æ –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª–∏–∞–ª–∞—Ö –≤–æ–æ–±—â–µ)
    """
    start_times = (
        datetime.timedelta(hours=8, minutes=00),
        datetime.timedelta(hours=9, minutes=40),
        datetime.timedelta(hours=11, minutes=20),
        datetime.timedelta(hours=13, minutes=30),
        datetime.timedelta(hours=15, minutes=10),
        datetime.timedelta(hours=16, minutes=50),
        datetime.timedelta(hours=18, minutes=25),
        datetime.timedelta(hours=20, minutes=00)
    )

    start_time = datetime.timedelta(hours=start_time.hour, minutes=start_time.minute)

    if start_time not in start_times:
        return None

    lesson_timedelta = datetime.timedelta(hours=1, minutes=30)

    """ –í —ç—Ç–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ –ª–∞–±—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ 2 –ø–∞—Ä—ã, –ø–æ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞ """
    # if lesson_type == '–ª.—Ä.':
    #     next_lesson_ind = start_times.index(start_time) + 1
    #     if next_lesson_ind > len(start_times) - 1:
    #         # –ë—ã–≤–∞—é—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ 20:00, –≤–∏–¥–∏–º–æ –æ–Ω–∏ –¥–ª—è—Ç—Å—è –æ–¥–Ω—É –ø–∞—Ä—É
    #         next_lesson_ind = len(start_times) - 1
    #     end_time = start_times[next_lesson_ind] + lesson_timedelta
    # else:
    #     end_time = start_time + lesson_timedelta

    end_time = start_time + lesson_timedelta

    return (datetime.datetime.min + end_time).time()


async def get_schedule_by_week_day(group_id: int, day_of_week: int, parity: int, db):
    async with db.begin() as session:
        schedule = await GroupLesson.get_group_day_schedule(session, group_id, day_of_week)

        if not schedule:  # free day
            return None

        schedule = [schedule_item for schedule_item in schedule if schedule_item.int_parity_of_week in (0, parity)]
        schedule = sorted(schedule, key=lambda x: x.start_time)

        return schedule


async def parse_all_groups(db):
    logging.info('Start parsing groups')
    parsed_groups = await KaiParser.get_group_ids()
    logging.info(f'Got {len(parsed_groups)} from KAI')
    async with db() as session:
        for parsed_group in parsed_groups:
            new_group = Group(
                group_id=parsed_group.id,
                group_name=int(parsed_group.group)
            )
            session.add(new_group)
            try:
                await session.commit()
            except IntegrityError:
                # logging.info(f'Group {parsed_group.group} already exists')
                await session.rollback()
                await session.flush()
            else:
                logging.info(f'New group: {parsed_group.group}')

    logging.info('Groups parsing completed')


async def parse_all_groups_schedule(db):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã. –ó–∞–Ω–∏–º–∞–µ—Ç 5-10 –º–∏–Ω—É—Ç
    """
    logging.info('Start parsing all groups')
    async with db.begin() as session:
        groups = await Group.get_all(session)
        total = len(groups)
        for parsed, group in enumerate(groups, start=1):
            try:
                group_schedule = await KaiParser.get_group_schedule(group.group_id)
                new_schedule = list()
                for lesson in group_schedule:
                    if lesson.prepodName.lower() == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã':
                        lesson.prepodLogin = ''
                    departament = await Departament.get_or_create(session, lesson.orgUnitId, lesson.orgUnitName)
                    teacher = await Teacher.get_or_create(session, lesson.prepodLogin, lesson.prepodName, departament)
                    discipline = await Discipline.get_or_create(session, lesson.disciplNum, lesson.disciplName)
                    new_lesson = await GroupLesson.update_or_create(
                        session, group.group_id, lesson, discipline, teacher, parse_parity(lesson.dayDate),
                        get_lesson_end_time(lesson.dayTime, lesson.disciplType)
                    )
                    new_schedule.append(new_lesson)

                deleted_lessons = await GroupLesson.clear_old_schedule(session, group.group_id, new_schedule)
                # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏

            except Exception as error:
                logging.error(f'Error with group: {error}')
                continue

            if parsed % 50 == 0:
                logging.info(f'{parsed}/{total} parsed')

    logging.info('All groups parsing complete')


async def main():
    k = KaiParser()
    groups = await k.get_group_ids()
    possible_parity = set()
    total = len(groups)
    for num, group in enumerate(groups[:2], start=1):
        schedule = await k.get_group_schedule(group.id)  # 23551 - 4120

        pprint(schedule)
        print(f'{num}/{total}')
        # pprint(schedule)
        # print()

    pprint(possible_parity)


if __name__ == '__main__':
    asyncio.run(main())
